---
# These are test cases for implementations of IETF JSON Patch (RFC6902).
# Adapted from https://github.com/Starcounter-Jack/JSON-Patch/blob/master/test/spec/json-patch-tests/tests.json

- comment: empty list, empty docs
  doc: {}
  patch: []
  expected: {}

- comment: empty patch list
  doc:
    foo: 1
  patch: []
  expected:
    foo: 1

- comment: rearrangements OK?
  doc:
    foo: 1
    bar: 2
  patch: []
  expected:
    bar: 2
    foo: 1

- comment: should fail with a non-array patch
  doc: {}
  patch: {}
  error: non-array patch

- comment: should fail with second path invalid
  doc: {}
  patch:
  - op: add
    path: /foo
    value: 123
  - op: add
    path:
    - foo
  - op: add
    path: /foo
    value: 123
  error: patch invalid

- comment: should fail with a fn value
  doc: {}
  patch:
  - op: add
    path: /foo
  valueFn: true
  error: fn value patch

- comment: should not include circular dependencies
  doc: {}
  patch:
  - op: add
    path: /foo
  circular: true
  error: patch invalid

- comment: should fail with a nonvalid jsondata
  doc: {}
  patch:
  - op: add
    path: /foo
  nonValidJson: true
  error: nonvalid jsondata

- comment: rearrangements OK?  How about one level down...
  doc:
    foo:
      foo: 1
      bar: 2
  patch: []
  expected:
    foo:
      bar: 2
      foo: 1

- comment: add replaces any existing field
  doc:
    foo: {}
  patch:
  - op: add
    path: "/foo"
    value: 1
  expected:
    foo: 1

- comment: toplevel object, numeric string
  doc: {}
  patch:
  - op: add
    path: "/foo"
    value: '1'
  expected:
    foo: '1'

- comment: toplevel object, integer
  doc: {}
  patch:
  - op: add
    path: "/foo"
    value: 1
  expected:
    foo: 1

- comment: Add, / target
  doc: {}
  patch:
  - op: add
    path: "/"
    value: 1
  expected:
    '': 1

- comment: Add composite value at top level
  doc:
    foo: 1
  patch:
  - op: add
    path: "/bar"
    value:
    - 1
    - 2
  expected:
    foo: 1
    bar:
    - 1
    - 2

- comment: Add into composite value
  doc:
    foo: 1
    baz:
    - qux: hello
  patch:
  - op: add
    path: "/baz/0/foo"
    value: world
  expected:
    foo: 1
    baz:
    - qux: hello
      foo: world

- comment: Should fail with out of bounds
  doc:
    bar:
    - 1
    - 2
  patch:
  - op: add
    path: "/bar/8"
    value: '5'
  error: Out of bounds (upper)

- comment: Should fail with out of bounds 2
  doc:
    bar:
    - 1
    - 2
  patch:
  - op: add
    path: "/bar/-1"
    value: '5'
  error: Out of bounds (lower)

- comment: Should add a boolean
  doc:
    foo: 1
  patch:
  - op: add
    path: "/bar"
    value: true
  expected:
    foo: 1
    bar: true

- doc:
    foo: 1
  patch:
  - op: add
    path: "/bar"
    value: false
  expected:
    foo: 1
    bar: false

- doc:
    foo: 1
  patch:
  - op: add
    path: "/bar"
    value: 
  expected:
    foo: 1
    bar: 

- comment: 0 can be an array index or object element name
  doc:
    foo: 1
  patch:
  - op: add
    path: "/0"
    value: bar
  expected:
    '0': bar
    foo: 1

- comment: test against implementation-specific numeric parsing
  doc:
    1e0: foo
  patch:
  - op: test
    path: "/1e0"
    value: foo
  expected:
    1e0: foo

- doc:
    foo: 1
    bar:
    - 1
    - 2
    - 3
    - 4
  patch:
  - op: remove
    path: "/bar"
  expected:
    foo: 1

- comment: Should remove an item from an array
  doc:
    foo: 1
    baz:
    - qux: hello
  patch:
  - op: remove
    path: "/baz/0/qux"
  expected:
    foo: 1
    baz:
    - {}

- doc:
    foo: 1
    baz:
    - qux: hello
  patch:
  - op: replace
    path: "/foo"
    value:
    - 1
    - 2
    - 3
    - 4
  expected:
    foo:
    - 1
    - 2
    - 3
    - 4
    baz:
    - qux: hello

- doc:
    foo:
    - 1
    - 2
    - 3
    - 4
    baz:
    - qux: hello
  patch:
  - op: replace
    path: "/baz/0/qux"
    value: world
  expected:
    foo:
    - 1
    - 2
    - 3
    - 4
    baz:
    - qux: world

- comment: replace whole document
  doc:
    foo: bar
  patch:
  - op: replace
    path: ''
    value:
      baz: qux
  error: Shouldn't allow to replace the whole document

- comment: spurious patch properties
  doc:
    foo: 1
  patch:
  - op: test
    path: "/foo"
    value: 1
    spurious: 1
  error: not valid patch

- doc:
    foo: 
  patch:
  - op: test
    path: "/foo"
    value: 
  comment: null value should be valid obj property

- doc:
    foo: 
  patch:
  - op: replace
    path: "/foo"
    value: truthy
  expected:
    foo: truthy
  comment: null value should be valid obj property to be replaced with something truthy

- doc:
    foo: 
  patch:
  - op: move
    from: "/foo"
    path: "/bar"
  expected:
    bar: 
  comment: null value should be valid obj property to be moved

- doc:
    foo: 
  patch:
  - op: copy
    from: "/foo"
    path: "/bar"
  expected:
    foo: 
    bar: 
  comment: null value should be valid obj property to be copied

- doc:
    foo: 
  patch:
  - op: remove
    path: "/foo"
  expected: {}
  comment: null value should be valid obj property to be removed

- doc:
    foo: bar
  patch:
  - op: replace
    path: "/foo"
    value: 
  expected:
    foo: 
  comment: null value should still be valid obj property replace other value

- doc:
    foo:
      foo: 1
      bar: 2
  patch:
  - op: test
    path: "/foo"
    value:
      bar: 2
      foo: 1
  comment: test should pass despite rearrangement

- doc:
    foo:
    - foo: 1
      bar: 2
  patch:
  - op: test
    path: "/foo"
    value:
    - bar: 2
      foo: 1
  comment: test should pass despite (nested) rearrangement

- doc:
    foo:
      bar:
      - 1
      - 2
      - 5
      - 4
  patch:
  - op: test
    path: "/foo"
    value:
      bar:
      - 1
      - 2
      - 5
      - 4
  comment: test should pass - no error

- doc:
    foo:
      bar:
      - 1
      - 2
      - 5
      - 4
  patch:
  - op: test
    path: "/foo"
    value:
    - 1
    - 2
  error: test op should fail

- comment: Whole document
  doc:
    foo: 1
  patch:
  - op: test
    path: ''
    value:
      foo: 1
  disabled: true

- comment: Empty-string element
  doc:
    '': 1
  patch:
  - op: test
    path: "/"
    value: 1
- doc:
    foo:
    - bar
    - baz
    '': 0
    a/b: 1
    c%d: 2
    e^f: 3
    g|h: 4
    i\j: 5
    k"l: 6
    " ": 7
    m~n: 8
  patch:
  - op: test
    path: "/foo"
    value:
    - bar
    - baz
  - op: test
    path: "/foo/0"
    value: bar
  - op: test
    path: "/"
    value: 0
  - op: test
    path: "/a~1b"
    value: 1
  - op: test
    path: "/c%d"
    value: 2
  - op: test
    path: "/e^f"
    value: 3
  - op: test
    path: "/g|h"
    value: 4
  - op: test
    path: "/i\\j"
    value: 5
  - op: test
    path: /k"l
    value: 6
  - op: test
    path: "/ "
    value: 7
  - op: test
    path: "/m~0n"
    value: 8

- comment: Move to same location has no effect
  doc:
    foo: 1
  patch:
  - op: move
    from: "/foo"
    path: "/foo"
  expected:
    foo: 1

- doc:
    foo: 1
    baz:
    - qux: hello
  patch:
  - op: move
    from: "/foo"
    path: "/bar"
  expected:
    baz:
    - qux: hello
    bar: 1

- doc:
    baz:
    - qux: hello
    bar: 1
  patch:
  - op: move
    from: "/baz/0/qux"
    path: "/baz/1"
  expected:
    baz:
    - {}
    - hello
    bar: 1

- doc:
    baz:
    - qux: hello
    bar: 1
  patch:
  - op: copy
    from: "/baz/0"
    path: "/boo"
  expected:
    baz:
    - qux: hello
    bar: 1
    boo:
      qux: hello

- comment: replacing the root of the document is possible with add
  doc:
    foo: bar
  patch:
  - op: add
    path: ''
    value:
      baz: qux
  error: Shouldn't be able to change the root

- comment: Adding to "/-" adds to the end of the array
  doc:
    foo:
    - 1
    - 2
  patch:
  - op: add
    path: "/foo/-"
    value:
      bar:
      - baz
      - qux
  expected:
    foo:
    - 1
    - 2
    - bar:
      - baz
      - qux

- comment: Adding to "/-" adds to the end of the array, even n levels down
  doc:
    foo:
    - 1
    - 2
    - - 3
      - - 4
        - 5
  patch:
  - op: add
    path: "/foo/2/1/-"
    value:
      foo:
      - bar
      - baz
  expected:
    foo:
    - 1
    - 2
    - - 3
      - - 4
        - 5
        - foo:
          - bar
          - baz

- comment: test remove with bad number should fail
  doc:
    foo: 1
    baz:
    - qux: hello
  patch:
  - op: remove
    path: "/baz/1e0/qux"
  error: remove op shouldn't remove from array with bad number

- comment: test remove on array
  doc:
    foo:
    - 1
    - 2
    - 3
    - 4
  patch:
  - op: remove
    path: "/foo/0"
  expected:
    foo:
    - 2
    - 3
    - 4

- comment: test repeated removes
  doc:
    foo:
    - 1
    - 2
    - 3
    - 4
  patch:
  - op: remove
    path: "/foo/1"
  - op: remove
    path: "/foo/2"
  expected:
    foo:
    - 1
    - 3

- comment: test remove with bad index should fail
  doc:
    foo:
    - 1
    - 2
    - 3
    - 4
  patch:
  - op: remove
    path: "/foo/1e0"
  error: remove op shouldn't remove from array with bad number

- comment: test replace with bad number should fail
  doc:
    foo:
    - ''
  patch:
  - op: replace
    path: "/foo/1e0"
    value: false
  error: replace op shouldn't replace in array with bad number

- comment: test copy with bad number should fail
  doc:
    baz:
    - 1
    - 2
    - 3
    bar: 1
  patch:
  - op: copy
    from: "/baz/1e0"
    path: "/boo"
  error: copy op shouldn't work with bad number

- comment: test move with bad number should fail
  doc:
    foo: 1
    baz:
    - 1
    - 2
    - 3
    - 4
  patch:
  - op: move
    from: "/baz/1e0"
    path: "/foo"
  error: move op shouldn't work with bad number

- comment: test add with bad number should fail
  doc:
    foo:
    - foo
    - sil
  patch:
  - op: add
    path: "/foo/1e0"
    value: bar
  error: add op shouldn't add to array with bad number

- comment: missing 'value' parameter to add
  doc:
    foo:
    - 1
  patch:
  - op: add
    path: "/foo/-"
  error: missing 'value' parameter

- comment: missing 'value' parameter to replace
  doc:
    foo:
    - 1
  patch:
  - op: replace
    path: "/foo/0"
  error: missing 'value' parameter

- comment: missing 'value' parameter to test
  doc:
    foo:
    - 
  patch:
  - op: test
    path: "/foo/0"
  error: missing 'value' parameter

- comment: missing value parameter to test - where undef is falsy
  doc:
    foo:
    - false
  patch:
  - op: test
    path: "/foo/0"
  error: missing 'value' parameter

- comment: missing from parameter to copy
  doc:
    foo:
    - 1
  patch:
  - op: copy
    path: "/foo/-"
  error: missing 'from' parameter

- comment: missing from parameter to move
  doc:
    foo: 1
  patch:
  - op: move
    path: ''
  error: missing 'from' parameter

- comment: duplicate ops
  doc:
    foo: bar
  patch:
  - op: move
    path: "/baz"
    value: qux
    from: "/foo"
  error: patch has two 'op' members
  disabled: true

- comment: unrecognized op should fail
  doc:
    foo: 1
  patch:
  - op: spam
    path: "/foo"
    value: 1
  error: Unrecognized op 'spam'

- comment: merge patch test
  doc:
    foo:
      bar: 123
  patch:
  - op: merge
    path: /foo
    value:
      bam: 123
  expected:
    foo:
      bar: 123
      bam: 123

- comment: merge patch on an bad path
  doc:
    foo:
      bar: 123
  patch:
  - op: merge
    path: /baz/bam
    value:
      bam: 123
  error: path does not exits

- comment: merge patch on an bad path
  doc:
    foo:
      bar: 123
  patch:
  - op: merge
    path: /baz/bam
    value:
      bam: 123
  error: path does not exits

- comment: merge patch with on bad value
  doc:
    foo:
      bar: 123
  patch:
  - op: merge
    path: /foo/bar
    value:
      bam: 123
  error: value cannot be merged

- comment: copy with out of bounds
  doc:
    foo:
    - 1
    - 2
    bar:
    - 1
  patch:
  - op: copy
    path: /bar/-
    from: /foo/10
  error: copy with out of bounds

- comment: move should fail with non existent from
  doc:
    foo:
      bar: 123
  patch:
  - op: move
    path: /foo/bam
    from: /foo/boo/baz
  error: move should fail

- comment: should copy the last item from an array
  doc:
    foo:
    - 1
    - 2
    bar:
    - 1
  patch:
  - op: copy
    path: /bar/-
    from: /foo/-
  expected:
    foo:
    - 1
    - 2
    bar:
    - 1
    - 2

- comment: should allow patch with underscore in path
  doc:
    foo:
      bar: 123
  patch:
  - op: add
    path: /foo/_bar
    value: 123
  expected:
    foo:
      bar: 123
      _bar: 123

- comment: should remove cache for nodes affected by patch
  doc:
    bar: 123
    bam:
      baz:
        bim: 321
  patch:
  - op: replace
    path: /bar
    value: 444
  - op: replace
    path: /bam/baz/bim
    value: 555
  - op: merge
    path: /bam
    value:
      baz:
        qux: 123
        bim: 777
  dynamic:
    /foo: ['/bar']
    /bam/baz/bloo: ['/foo']
    /bla: ['/bam']
  cache:
  - /bla/baz/bim
  - /bla/baz
  - /bla
  expected:
    bar: 444
    foo: 444
    bam:
      baz:
        bim: 777
        bloo: 444
        qux: 123
    bla:
      baz:
        qux: 123
        bim: 777
        bloo: 444

- comment: should properly patch a simple addition when multiple patches are sent
  doc:
    foo: []
    bar: {}
  patch:
  - op: add
    path: /foo/-
    value: 123
  - op: add
    path: /bar
    value: 321
  expected:
    foo: [123]
    bar: 321

#TODO:
# replace /items/0 does not update the array instead is doing a shift
